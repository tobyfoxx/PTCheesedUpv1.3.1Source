message = "don't steal my code shithead";

#region object list

function cyop_objectlist()
{
	// Autogenerated with this UTMT script that I made in 1 minute
	/*
		var str = "";
		foreach (var i in Data.GameObjects) {
			str += $"{i.Name.Content},\n";
		}
		return str;
	*/
	
	return [
		obj_bossdoor,
		obj_hardmode,
		obj_bosskeynoise,
		obj_grindrailslope,
		obj_banditochicken_dynamite,
		obj_lightsource,
		obj_followcharacter,
		obj_doorRobot,
		obj_tubeleft,
		obj_introprop,
		obj_fakepepboss,
		obj_escapecollect,
		obj_tubeenter,
		obj_geromeanim,
		obj_ratprop,
		obj_hillbillymonster,
		obj_rattumble,
		obj_editor,
		obj_tubeexitmach,
		obj_bosshitbox,
		par_boss,
		obj_mortfollow,
		obj_mach3solid,
		obj_deadjohn1,
		obj_solid_goblinraid,
		obj_baddiebutton,
		obj_endgamefade,
		obj_hotmetalblock,
		obj_olivebubbledeco,
		obj_moustachehitbox,
		obj_fakepeplimb,
		obj_piraneapple_spawn,
		obj_farmerbaddie2,
		obj_forknight_pizzahead,
		obj_secrettile,
		obj_pf_fakepep,
		obj_chargeenemyhitbox,
		obj_bigspaceblock,
		obj_trash,
		obj_ghoul,
		obj_vigilantebazooka,
		obj_audioconfig,
		obj_soundtest_pause,
		obj_raceend,
		obj_kentukybomb,
		obj_vigilanteNPC,
		obj_snowparticle,
		obj_pizzafaceboss_p3,
		obj_motorboat,
		obj_charswitch_intro,
		obj_negativenumber,
		obj_backgroundreplace,
		obj_pigdark,
		obj_baddiehurtbox,
		obj_stick_forsale,
		obj_sausageeyes,
		obj_cowspawner,
		obj_spaceshuttlestop,
		"obj_debugcontroller",
		obj_bigspitcheesespike,
		obj_mainmenu_jumpscare,
		obj_ventilatorleaf,
		obj_timesupwar,
		obj_deadjohnparent,
		obj_pizzahead_cog,
		obj_ufobullet,
		obj_pizzaface_showerprop,
		obj_monstertrackingrooms,
		obj_credits,
		obj_pizzamech,
		obj_afterimagecontroller,
		obj_noisejetpack,
		obj_pf_fakepepgianthead,
		obj_golfhoop,
		obj_farmer2,
		obj_playerprop_macheffect,
		obj_grandma,
		obj_brickcomeback,
		obj_pizzahead_blackfade,
		obj_confettieffect,
		obj_pepperman,
		obj_chieftainNPC,
		obj_transfotip,
		obj_dialogcontroller,
		obj_racestart,
		obj_railswitchslow,
		obj_pizzafacebrick,
		obj_factoryswitch,
		obj_platformvigi,
		obj_marbleblock,
		obj_fakesantapresent,
		obj_noisefollower,
		obj_knightplatform,
		obj_trap,
		obj_weeniehitbox,
		obj_menutv2,
		obj_stringycheese,
		obj_pizzaball_golfhit,
		obj_secretportal,
		obj_piraneapple_sign,
		obj_chainsawpuff,
		obj_bee,
		obj_tiledestroy,
		obj_noiseyspawner2,
		obj_tubeexitdownexit,
		obj_weenie,
		obj_PTG,
		obj_conveyorspawner,
		obj_pepper_marbleblock,
		obj_peppinoswitch,
		obj_toppinprop,
		obj_horsey,
		obj_pizzaball,
		obj_pizzaheadminigun,
		obj_kentukylenny,
		obj_tutorialtargetblock,
		obj_fmod,
		obj_pizzaheadsword,
		obj_bossdark,
		obj_tiledintroprop,
		obj_stick,
		obj_blackoutline,
		obj_destroyablegolf,
		obj_nosand,
		obj_meatgrinder,
		obj_toxicbutton,
		obj_instanttemp,
		obj_noisekeytell,
		obJ_fakepephallwayend,
		obj_gnomecustomerblockfinal,
		obj_fakepeptauntspawner,
		obj_cowstampede,
		obj_menutv3,
		obj_toxiccloud,
		obj_mine,
		obj_clownmatoOLD,
		obj_peppermanGIANTbowlingball,
		obj_vigilanteshot,
		obj_pizzafaceboss_p2,
		obj_reversespaceblock,
		obj_ammocollect,
		obj_dynamiteexplosion_boss,
		obj_ratmountgroundpound,
		obj_fakepepsolid,
		obj_farmer3projectile,
		obj_gustavoswitch,
		obj_soundtest_next,
		obj_speedlinesup,
		obj_tutorialblock,
		obj_icicle_spawner,
		obj_burd,
		obj_noisebigkey,
		obj_pizzaheadTVspawner,
		"obj_noisebossOLD",
		obj_endingeffect,
		"obj_musicOLD",
		obj_johnresurrection_peppino,
		obj_destructible_goblinraid,
		obj_noisewashingmachinetower,
		obj_collectgolf,
		obj_donkey,
		obj_loophallway,
		obj_johnresurrection_gerome,
		obj_farmerprojectile,
		obj_skateboardnoise,
		obj_noisebigbomb,
		obj_pizzaheadportrait,
		obj_tvtrap,
		obj_hiddenobjecttrigger,
		obj_gustavograbbable,
		obj_king,
		obj_fakepepclone,
		obj_geromeexit,
		obj_poodebris,
		obj_shotgunback,
		obj_johnecheese_spawner,
		obj_kidspartybg,
		obj_noisettecafe,
		obj_text,
		obj_movingplatform,
		obj_baddietombcontroller,
		obj_factorygate,
		obj_farmerbaddie,
		obj_soundtest,
		obj_noisettefinale,
		obj_keyconfig,
		obj_mrstickcardboard,
		obj_longintro,
		obj_targetguy,
		obj_computer,
		obj_pepper_marblestatue,
		obj_baddiecollisionboxTEST,
		obj_ratblock1x1,
		obj_cullingsystem,
		obj_clownmato,
		obj_globaltimer,
		obj_factorycreateeffect,
		obj_playerprop,
		obj_patroller,
		obj_noisecrushertrail,
		obj_moving_hstop,
		obj_bottletreasure,
		obj_secrettrigger,
		obj_cheftask,
		obj_whoophand,
		obj_cow,
		obj_totemthunder,
		obj_millionpunchhitbox,
		obj_pizzakinparent,
		obj_freezeddragon,
		obj_vigilantecow,
		obj_pizzahead_finalecutscene,
		obj_exitgustavo,
		obj_snotty,
		obj_actor,
		obj_smallletters,
		obj_mrsticknotification,
		obj_sausageman,
		obj_vigilante_duelintro,
		obj_geromeblock,
		obj_pineappleprojectilespawn,
		obj_uziprojectile,
		obj_pistolbullet,
		obj_chickenpickup,
		obj_pepanimatronicfollow,
		obj_pizzafaceboss_p2OLD,
		obj_micnoise,
		obj_uparrowhitbox,
		obj_taxitransition,
		obj_touchall,
		obj_farmer2projectile,
		obj_stickfollower,
		obj_hppickup,
		obj_priesthazard,
		obj_textureloading,
		obj_viginoiseyspawner,
		obj_farmerbaddie2_projectile,
		"obj_vigilantebossOLD",
		obj_hallwaymonster,
		obj_doorG,
		obj_startgate_hats,
		obj_farmer2follow,
		obj_hiddenobject,
		obj_totemcloud,
		obj_frontcanonbomb,
		obj_startgate_pizza,
		obj_magnet,
		obj_hubelevator,
		obj_secretportalstart,
		obj_playereffectprop,
		obj_ratblock,
		obj_balloongrabbableeffect,
		obj_jumpscare,
		obj_shuttleparts,
		obj_pizzaarrowtrap,
		obj_chunktimer,
		obj_antigravbubbleeffect,
		obj_startgate_treasure,
		obj_motorcycleblock,
		obj_ghostknight,
		obj_screensizer,
		obj_stickycheeseprojectile,
		obj_moving_vstop,
		obj_fakepephead,
		obj_policebooth,
		obj_johnresurrection,
		obj_pizzaheadbrickball,
		obj_particlesystem,
		obj_destroyable_respawner,
		obj_mainmenu,
		obj_rocket,
		obj_deliveryfollower,
		obj_railswitchnone,
		obj_lightsource_expand,
		obj_policecar,
		obj_railparent,
		obj_textbutton,
		obj_dungeonblock,
		obj_morthook,
		obj_cheeseballspawner,
		obj_baddiegibsstick,
		obj_brickball,
		obj_fakepeplimb2,
		obj_exitfollower,
		obj_stick_target,
		obj_trapghost,
		obj_exitfollowercollect,
		obj_horseydown,
		obj_lapportalentrance,
		obj_heatafterimage,
		obj_ghostdrapes,
		obj_bosscontroller,
		obj_ladderhorizontal,
		obj_johnghost,
		obj_mortflyaway,
		obj_treasureeffect,
		obj_chateaulight,
		obj_peppermanbowlingballspawner,
		obj_ghostblock,
		obj_patrolcone,
		obj_tubedown,
		obj_soldier,
		obj_knighttrap,
		obj_farmerbaddie3,
		obj_snicktower,
		obj_ghosthazard,
		obj_laundrymachine,
		obj_hamkuff,
		obj_secretmanager,
		obj_pineabreakdancehitbox,
		obj_monsterslope,
		obj_farmer3follow,
		obj_escapespawn,
		obj_technicaldifficulty,
		obj_backtohub_fadeout,
		obj_cowfall,
		obj_spaceshuttlecutscene,
		obj_nuketerminal,
		obj_pizzice_projectile,
		obj_hurtstars,
		obj_spaceshuttle,
		obj_peppermanbrick,
		obj_moneynumber,
		obj_slugbullet,
		obj_noisebosscrate,
		obj_pizzafacebaddie,
		obj_bossplayerdeath,
		obj_pepperman_pepportrait,
		obj_enemybullet,
		obj_soundtest_button,
		obj_ghostdashpad,
		obj_totem,
		obj_snowmanhead,
		obj_bazookabaddie,
		obj_roomcheck,
		obj_johnecheese,
		obj_noisey,
		obj_farmer1follow,
		obj_surprisebox_boss,
		obj_afom_arenadoor, //obj_arenadoor,
		obj_stick_forsale2,
		obj_spawner_goblinraid,
		obj_superattackeffect,
		obj_finalhallwayface,
		obj_finishereffect,
		obj_horseyright,
		obj_hungrypillarflash,
		obj_badratspawner,
		obj_coopplayerfollow,
		obj_grannypizzasign,
		obj_horseyup,
		obj_treasureviewer,
		obj_crosspriest_cross,
		obj_smokingprojectile,
		obj_peppermanvengeful,
		obj_frontcanoncrosshair,
		obj_optiondoor,
		obj_playerspikecheese,
		obj_pizzaface_thunderdark,
		obj_graffiti,
		obj_menutv1,
		obj_timecollect,
		obj_ramp,
		obj_meatballtower,
		obj_deadjohn2,
		obj_weenieOLD,
		obj_fakepepprojectile,
		obj_soundtrap,
		obj_farmerbaddie3_projectile,
		obj_horseyblock,
		obj_clownballoon,
		obj_johnresurrection_pizzahead,
		obj_revolvershot,
		obj_tank,
		obj_pizzaheadbomb,
		obj_superpinballmachine,
		obj_pizzice,
		obj_smokingpizzaslice,
		obj_stairs,
		obj_noisehotairempty,
		obj_soundtest_prev,
		obj_minecart_rail,
		obj_hpeffect,
		obj_farmerpeasanto,
		obj_whoop,
		obj_levelselect,
		obj_gusbrickfightball,
		obj_chickenfollow,
		obj_warplaserhoming,
		obj_brickballspeedline,
		obj_geromedoor,
		obj_spider,
		obj_antigravbubble,
		obj_flamethrowerhurtbox,
		obj_fakeobject,
		obj_menutv,
		obj_beedeco,
		obj_robotmonster,
		obj_pinballtrap,
		obj_tea,
		obj_clownballoon_projectile,
		obj_clerk,
		obj_alienbyebye,
		obj_climbablewall,
		obj_pepper_groundpoundspot,
		obj_rubble,
		obj_spiderweb,
		obj_characterswitch,
		obj_lightsource_attach,
		obj_gustavodestroyable,
		obj_iceblock_breakable,
		obj_farmerpeasantoprojectile,
		obj_deadjohn3,
		obj_turret,
		obj_climbingupstairs,
		obj_electricwall,
		obj_beatbox,
		obj_freezerblock,
		obj_pizzafacepart,
		obj_robotmonsterhand,
		obj_beer,
		obj_gravecorpse,
		obj_wartimer,
		obj_bigbeer,
		obj_savesystem,
		obj_palettedresser,
		obj_bossvulnerable,
		obj_johndestructible,
		obj_farmerparent,
		obj_cutoffsmall,
		obj_ufoexterior,
		obj_stickycheese,
		obj_monstersolid,
		obj_noisekey,
		obj_arcprojectile,
		obj_wirewall,
		obj_hamburger,
		obj_notes,
		obj_poweringupeffect,
		obj_doorMonster,
		obj_lapportal,
		obj_pizzasona_points,
		obj_fakepephallwaystart,
		obj_getingetin,
		obj_papertreasure,
		obj_peppinoclone,
		obj_bounceplank,
		obj_peppermanbowlingball,
		obj_vigilantedynamite,
		obj_taxicardboard,
		obj_cheesedragontower,
		obj_fakepepflash,
		obj_noisebombboss,
		obj_bubbles,
		obj_button,
		obj_pizzaheadstomp,
		obj_deliveryfolloweranim,
		obj_gerome,
		obj_electricpotato,
		obj_rancherbullet_debris,
		obj_pistolpickup,
		obj_smallforestblock,
		obj_fallingplatform,
		obj_hattreasure,
		obj_ghostcollectibles,
		obj_achievement_enemiesdead,
		obj_eggplantdisclaimer,
		obj_cutoff,
		obj_genericfade,
		obj_pizzafacefallout,
		obj_frontcanongoblin_trigger,
		obj_playersmokehitbox,
		obj_endingprop,
		obj_frontcanongoblin,
		obj_vigilanteboss,
		obj_cheeseboat,
		obj_miniufo_grounded,
		obj_noiseballooncrash,
		obj_drawcontroller,
		obj_rocketdead,
		obj_noiseboss,
		obj_pizzaarrow,
		obj_bigforestblock,
		obj_pizzafacehitbox,
		obj_cleaningwater,
		obj_deliverytimer,
		obj_arena_pizzaportal,
		obj_noisebossbomb,
		obj_haystackrope,
		obj_monstergate,
		obj_pizzahead_haywire,
		obj_baddiespawnernograv,
		obj_spaceblock,
		obj_gusbrickchase,
		obj_priest,
		obj_tutorialbook,
		obj_mrstickboss,
		obj_baddiebutton_perma,
		obj_fakepeppinospawner,
		obj_titlecard,
		obj_baddiegate,
		obj_vigilantefollower,
		obj_tubeup,
		obj_sandparticle,
		obj_gusbrickhurt,
		obj_asteroid,
		obj_startgate_secreteye,
		obj_golfdemon,
		obj_filedoor,
		obj_forknightspawner,
		obj_tuberight,
		obj_combotitle,
		obj_factoryblock,
		obj_wordhitbox,
		obj_bazooka,
		obj_deliverypizzabox,
		obj_slope,
		obj_solid,
		obj_thunder,
		obj_swordstone,
		obj_bombexplosion,
		obj_boilingsauce,
		obj_puppetsafezone,
		obj_dummyTEST,
		obj_tinyslimedude,
		obj_pizzagoblinbomb,
		obj_camerapatrol,
		obj_canongoblinbomb,
		obj_player,
		obj_player2,
		obj_player1,
		obj_pause,
		obj_music,
		obj_tv,
		obj_bosshealth,
		obj_camera,
		obj_playerexplosion,
		obj_toppinwarriorattack,
		obj_destructibles,
		obj_bigdestructibles,
		obj_saveroom,
		obj_panicdebris,
		obj_kentukylenny_projectile,
		obj_controller,
		obj_stylebar,
		obj_parallax,
		obj_pizzacoinindicator,
		obj_secretfound,
		obj_cooppointer,
		obj_stick_gateprop,
		obj_coopflag,
		obj_escapecollectbig,
		obj_roomname,
		obj_timeattack,
		obj_vigidelete,
		obj_pigtotal,
		obj_anchortrap,
		epicboogaloo,
		obj_inputAssigner,
		obj_title,
		obj_mainmenuselect,
		obj_option,
		obj_erasegame,
		obj_lungehitbox,
		"obj_keyconfigOLD",
		obj_cursor,
		obj_menuselections,
		obj_hard,
		obj_controls,
		obj_file1,
		obj_file3,
		obj_mrmooney,
		obj_file2,
		obj_retry,
		obj_exit,
		obj_manual,
		obj_characterselect,
		obj_peppinoselect,
		obj_noiseselect,
		obj_mouthhitbox,
		obj_rank,
		obj_generaldestroyable,
		obj_noiseyspawner,
		obj_timesup,
		obj_rattumble_big,
		obj_slaphitbox,
		obj_canonexplosion,
		obj_gasolinetreasure,
		obj_bomb,
		obj_swordhitbox,
		obj_introscooter,
		obj_haystack,
		obj_firemouth_projectile,
		obj_junk,
		obj_throwableparent,
		obj_stampedecloud,
		obj_breakabletv,
		obj_shotgunbullet,
		obj_metalblock,
		obj_shotgunbullet857,
		obj_dynamiteexplosion,
		obj_car_dead,
		obj_baddiecollisionbox,
		obj_slaphitbox2,
		obj_hurtbox,
		obj_pizzaface_thunder,
		obj_swingdinghitbox,
		obj_playerbomb,
		obj_dynamite,
		obj_pizzaheadbomb_explosion,
		obj_mortblock,
		obj_morthitbox,
		obj_kentukykenny_projectile,
		obj_pizzard_bolt,
		obj_pepgoblin_kickhitbox,
		obj_rancher_bullet,
		obj_minijohn_hitbox,
		obj_spike,
		obj_vigilantebazookatrail,
		obj_warblock,
		obj_conveyordespawner,
		obj_fightballblock,
		obj_baddie,
		obj_thug_red,
		obj_parryhitbox,
		obj_baddiecollisionboxother,
		obj_destructiblerockblock,
		obj_boss,
		obj_ghostfollow,
		obj_baddiedead,
		obj_robotknife,
		obj_spitcheesespike,
		obj_pineahitbox,
		obj_sausagemancigar,
		obj_verticalhallway,
		obj_forkhitbox,
		obj_slipnslide,
		obj_warplaser,
		obj_baddieragehitbox,
		obj_noisegoblin_arrow,
		obj_banditochicken_projectile,
		obj_junkenemy,
		obj_sausageman_dead,
		obj_enemybird,
		obj_slimedead,
		obj_enemybandaid,
		obj_cheeseslime,
		obj_thug_blue,
		obj_thug_green,
		obj_treasureguy,
		obj_treasureguybox,
		obj_minijohn,
		obj_piraneapple,
		obj_banditochicken,
		obj_snowman,
		obj_cheeserobot,
		obj_pizzaboy,
		obj_robot,
		obj_kentukykenny,
		obj_pizzagoblin,
		obj_noisegoblin,
		obj_canongoblin,
		obj_flush,
		obj_autocanon,
		obj_tvtrigger,
		obj_pizzard,
		obj_pickle,
		obj_rancher,
		obj_swedishmonkey,
		obj_randomobject,
		obj_pepgoblin,
		obj_johnresurrection_treasure,
		obj_pinballlauncher,
		obj_bigcheese,
		obj_ballgoal,
		"obj_pizzaballOLDOLD",
		obj_spitcheese,
		obj_trashOLD,
		obj_invtrash,
		obj_peasanto,
		obj_ninja,
		obj_forknight,
		obj_tankOLD,
		obj_coolpineapple,
		obj_ancho,
		obj_soundtest_gus,
		obj_miniufo,
		obj_indiancheese,
		obj_fencer,
		obj_sausagemanOLD,
		obj_grandpa,
		obj_weeniesquireOLD,
		obj_alienpickup,
		obj_weeniemount,
		obj_baddiespawner,
		obj_agressivebaddiespawner,
		obj_supriseenemyarea,
		obj_arenagate,
		obj_supriseenemy,
		obj_escapeenemy,
		obj_afom_arenaspawn, //obj_arenaspawn,
		obj_arenalimit,
		obj_arenaspawnpoint,
		obj_superspring,
		obj_gusbrickhub,
		obj_balloon,
		obj_timedgate,
		"obj_pizzafaceboss_p3OLD",
		obj_pizzaballOLD,
		obj_peppermandestroyable,
		"obj_peppermanOLD",
		obj_graffititreasure,
		obj_peppermancharge,
		obj_fakepeppino,
		obj_crushershockwave,
		obj_pepperbombspawner,
		obj_cheesedragon,
		obj_cheesedragonflames,
		obj_peppermanbomb,
		obj_enemyrain,
		obj_pizzaface,
		obj_onebyone,
		obj_platform,
		obj_destroyable,
		obj_ladder,
		obj_rollblock,
		obj_secretblock,
		obj_grabbiehandOLD,
		obj_desertdestroyable,
		obj_destroyable2,
		obj_destroyable3,
		obj_secretdestroyable,
		obj_onewaybigblock,
		obj_secretbigblock,
		obj_secretmetalblock,
		obj_destroyable2_big,
		obj_cheeseballblock,
		obj_barrelblock,
		obj_reverseminipillar,
		obj_minipillar,
		obj_movingoutlet,
		obj_null,
		obj_unclimbablewall,
		obj_grindrail,
		obj_bombblock,
		obj_enemyblock,
		obj_shotgunblock,
		obj_weaponmachine,
		obj_shotgun,
		obj_treasure,
		obj_giantkey,
		obj_pizzaboxunopen,
		obj_collect,
		obj_pizzapepper,
		obj_bigcollectgolf,
		obj_pizzashield_collectible,
		obj_pizzashield,
		obj_pizzakinshroom,
		obj_pizzakincheese,
		obj_pizzakintomato,
		obj_pizzakinsausage,
		obj_pizzakinpineapple,
		obj_noisebomb,
		obj_bigcollect,
		obj_giantcollect,
		obj_key,
		obj_pizzaslice,
		obj_pizzacoin,
		obj_phonebooth,
		obj_hungrypillar,
		obj_exitgate,
		obj_exitdoorsignground,
		obj_snicklevelend,
		obj_portalentrance,
		obj_portalend,
		obj_costumerdoor,
		obj_costumer,
		obj_costumerpizza,
		obj_cheeseball,
		obj_pineapplemonster,
		obj_wetfloor,
		obj_beertreasure,
		obj_noisebombspawner,
		obj_sidesuperspring,
		obj_beartrap,
		obj_bowlingball,
		obj_skateboard,
		obj_pizzacutterthwomp2,
		obj_pizzacutterthwomp1,
		obj_taxi,
		obj_stopsign,
		obj_mort_inline,
		obj_taxidud,
		obj_keydoor,
		obj_breakabledoor,
		obj_door,
		obj_goldendoor,
		obj_badrat,
		obj_doorblocked,
		obj_startgate,
		obj_boxofpizza,
		obj_hallway,
		obj_pitfall,
		obj_door2,
		obj_doorA,
		obj_doorB,
		obj_doorC,
		obj_doorD,
		obj_doorE,
		obj_pizzacutter1,
		obj_pizzacutter2,
		obj_destructibleplatform,
		obj_iceblock,
		obj_peppermanartdude,
		obj_risingboilingsauce,
		obj_noisetrap_rock,
		obj_dashpad,
		obj_tntblock,
		obj_noisedynamite,
		obj_boulder,
		obj_rockblock,
		obj_crosspriest,
		obj_noiserock,
		obj_boulderspawner,
		obj_firemouthflame,
		obj_freemilk,
		obj_tombstone,
		obj_ghostwall,
		obj_metaldetector,
		obj_noisehotair,
		obj_noisematch,
		obj_mortfollowerexit,
		obj_pizzafaceshower,
		obj_hookup,
		obj_pizzafaceboss_p2background,
		obj_mort,
		obj_lavapotfall,
		obj_mortgrain,
		obj_well,
		obj_warppoint,
		obj_gusbrickpoker,
		obj_lap2visual,
		obj_timedgateclock,
		obj_tomatoblock,
		obj_teleporter,
		obj_water,
		obj_woodbarrel,
		obj_barrel,
		obj_current,
		obj_barrelspawner,
		obj_gustavopizza,
		obj_gnomecustomer,
		obj_doornexthub,
		obj_gnomecustomerblock,
		obj_ratrunaway,
		obj_mushroom,
		obj_gnomehouse1,
		obj_gnomehouse2,
		obj_gnomehouse3,
		obj_gnomehouse4,
		obj_gnomehouse5,
		obj_washingmachinemount,
		obj_grabbiehand,
		obj_boxcrusher,
		obj_iceblock_temp,
		obj_hubtreasure,
		obj_cheeseblob,
		obj_cheesemaker,
		obj_railv,
		obj_railh2,
		obj_pizzacollectphy,
		obj_railh,
		obj_car,
		obj_vsscreen,
		obj_pizzasonacollect,
		obj_goalsign,
		obj_flushcount,
		obj_siren,
		obj_exitdoorsign,
		obj_plusseconds,
		obj_ranksign,
		obj_gustavo_warmissile,
		obj_donesign,
		obj_Hranksign,
		obj_press,
		obj_uparrow,
		obj_pizzaheadTV_bg,
		obj_creditimages,
		obj_leveltitles,
		obj_easy,
		obj_pizzafacep3_prop,
		obj_100,
		obj_80,
		obj_movingspike,
		obj_40,
		obj_gustavo_kidsparty,
		obj_20,
		obj_pizzaball_rank,
		obj_smallnumber,
		obj_cowboyhat,
		obj_treasureshadow,
		obj_Opeppino,
		obj_itspizzatime,
		obj_grabmarker,
		obj_parentparticle,
		obj_balloongrabbable,
		obj_baddiegibs,
		obj_fakesanta,
		obj_doorF,
		obj_washingmachine,
		obj_wooddebris,
		obj_slapstar,
		obj_pizzadebris,
		obj_debris,
		obj_dripspawner,
		obj_null, //object189,
		obj_explosive_goblinraid,
		obj_bulletcollectible,
		obj_knightdebris,
		obj_boxxeddebris,
		obj_glassdebris,
		obj_vomit,
		obj_slimedebris,
		obj_metaldebris,
		obj_meatblock,
		obj_drip,
		obj_skateboarddebris1,
		obj_lock,
		obj_pizzaloss,
		obj_skateboarddebris2,
		obj_tntblockdebris,
		obj_fallingHUDface,
		obj_cheesedragonshadow,
		obj_hubwater,
		obj_gusbrickcloud,
		obj_shakeanddie,
		obj_noisesatellite,
		obj_glassblock,
		obj_tutorialtrap,
		obj_crashingplane,
		obj_crashplaneblock,
		obj_pizzaballblock,
		obj_ventilator,
		obj_toppinwarrior,
		obj_toppinwarriorbutton,
		obj_logoprop,
		obj_solidpillar,
		obj_lightlamp,
		obj_farmer3,
		obj_lampost,
		obj_pillarentrance,
		obj_hardmode_ghost,
		obj_speedlines,
		obj_pizzaportalfade,
		obj_angrycloud,
		obj_sweat,
		obj_balloonpop,
		obj_fakepepfollower,
		obj_bulletimpact,
		obj_bulletdisappear,
		obj_chargeeffect,
		obj_superchargeeffect,
		obj_pogoeffect,
		obj_chainsaweffect,
		obj_vigilantespot,
		obj_explosioneffect,
		obj_pistoleffect,
		obj_shotgunjumpeffect,
		obj_superslameffect,
		obj_spikehurteffect,
		obj_stompeffect,
		obj_jumpdust,
		obj_superdashcloud,
		obj_highjumpcloud1,
		obj_highjumpcloud2,
		obj_grindeffect,
		obj_world5john,
		obj_brickgustavo,
		obj_punchdust,
		obj_fadeout,
		obj_pausefadeout,
		obj_endlevelfade,
		obj_bossdefeatflash,
		obj_bangeffect,
		obj_blackbars,
		obj_bumpeffect,
		obj_keyeffect,
		obj_doortransition,
		obj_doortransitionend,
		obj_doortransition2,
		obj_slidecloud,
		obj_puppetmonster,
		obj_landcloud,
		obj_dashcloud,
		obj_dashcloud2,
		obj_cloudeffect,
		obj_machalleffect,
		obj_afterimage,
		obj_crazyruneffect,
		obj_crazyrunothereffect,
		obj_taunteffect,
		obj_baddietaunteffect,
		obj_tauntafterimage,
		obj_toxicfan,
		obj_tauntaftereffectspawner,
		obj_flash,
		obj_ghosttransparency,
		obj_piranneapplewater,
		obj_bombdelete,
		obj_fakepepgianthead,
		obj_mrstickblock,
		obj_parryeffect,
		obj_golflauncher,
		obj_genericpoofeffect,
		obj_pizzafaceboss_p3intro,
		obj_snickexe,
		obj_SAGE2019achievementmarker,
		obj_snickchallengedoor,
		obj_cowboytask,
		obj_bossspotlight,
		obj_pepbat,
		obj_dresser,
		obj_achievementviewer,
		obj_presentbox,
		obj_iceblockminiboss,
		obj_santanoise,
		obj_santasleight,
		obj_santasleight2,
		obj_blank,
		obj_alienfollow,
		obj_clock,
		obj_lavapot,
		obj_objecticontracker,
		obj_hoop,
		obj_pizzaheadbullet,
		obj_null, // object474,
		obj_gustavo,
		obj_noisevengeful,
		obj_tinytaunt,
		obj_cutscene_handler,
		obj_customeractor,
		obj_pizzacustomer,
		obj_peasantohitbox,
		obj_mrstickhub,
		obj_taxi_cutscene,
		obj_gnome_checklist,
		obj_beachsandparticle,
		obj_mach3effect,
		obj_motodude,
		obj_baddiecameraspawner,
		obj_kentukybombfire,
		obj_priestangel,
		obj_gravesurfing,
		obj_kentukybomber,
		obj_golfburger,
		obj_planetparticle,
		obj_banditobomb,
		obj_iceblockslope,
		obj_burgertreasure,
		obj_checkpoint,
		obj_medievalprojectile,
		obj_smallspaceblock,
		obj_objectlist,
		obj_achievementtracker,
		obj_pizzafaceboss,
		obj_loadingscreen,
		obj_endingrank,
		obj_comboend,
		obj_geromefollow,
		obj_ending,
		obj_vigilanteunsure,
		obj_bosskeyspawn,
		obj_pizzaheadgetout,
		obj_fakepepheaddebris,
		obj_vigilantecrate,
		obj_evilbanana,
		obj_icicle,
		obj_ham,
		"obj_bosscontrollerOLD",
		"obj_pauseOLD",
		obj_gustavo_war,
		obj_enguardehitbox,
		obj_pineapplemonsterzone,
		obj_shotgunblast,
		obj_gustavofollower,
		obj_snottyexit,
		obj_playernoisearrow,
		obj_cracker,
		obj_pigcitizen,
		obj_pizzahead_whitefade,
		obj_tutorialtarget,
		obj_achievement_custom,
		obj_weeniesquire,
		obj_timedgatespawn,
		obj_blobmonster,
		obj_peppermanNPC,
		"obj_pizzafacebossOLD",
		obj_spaceblockswitch,
		obj_giantkeyfollow,
		obj_fakepepspawner,
		obj_toxicspray,
		obj_factorysensor,
		obj_pizzaheadswordstone,
		obj_horseyleft,
		obj_graffiticount,
		obj_monster,
		obj_version,
		obj_pepper_marblespot,
		obj_dialognpc,
		obj_screenconfirm,
		obj_keyfollow,
		obj_spaceshuttletrans,
		obj_pizzahead_attackhitbox,
		obj_antigrav,
		obj_peppermanfollower,
		obj_tile_precision_check,
		obj_tubeexitSjump,
		obj_bosskey,
		obj_fakesuperspring,
		obj_endingcard,
		obj_johnresurrection_pillar,
		obj_possessable,
		obj_bigtombstone,
		obj_minecart,
		"obj_rmEditor",
		"obj_editorInst",
		"obj_modAssets",
		"obj_editorBG",
		obj_cyop_loader,
		"obj_tilemapDrawer",
		"obj_customRoomTransition",
		"obj_customBG",
		obj_sprite,
		"obj_customAudio",
		"obj_menutvcustom",
		"obj_modMenu",
		"obj_pizzasona_spawn",
		"obj_towerBrowser",
		"obj_camera_region",
		"obj_warp_number",
		"obj_teleporter_receptor",
		obj_destroyable2_bigescape, //obj_destroyable2_big_escape,
		obj_destroyable2_escape,
		obj_destroyable_escape,
		obj_destroyable3_escape,
		
		// AFOM. some are from PTO. shameless.
		"obj_arenacontroller",
		"obj_collectarena", // handled manually
		"obj_bigcollectarena", // handled manually
		"obj_characterdresser",
		"obj_characterkey",
		"obj_palettechoice",
		"obj_lap1",
		"obj_lap1end",
		"obj_cameraflip",
		"obj_motocycle",
		"obj_motocycle_old",
		"obj_snickexf",
		"obj_snickexh",
		"obj_heavybomb",
		"obj_heavyexplosion",
		"obj_pizzard_knight",
		"obj_pizzard_bolt_knight",
		"obj_petmario",
		"obj_petpetuh",
		"obj_petsneck",
		"obj_petnoah",
		"obj_petraton",
		"obj_petgrunt",
		"obj_petspamton",
		"obj_petrat",
		"obj_spike_priest",
		"obj_noise_normalT1",
		"obj_secretexitblock",
		"obj_noisebossOLDfix",
		"obj_hook",
		"obj_hookend",
		obj_ballslope,
		"obj_pizzahead_eathitbox",
		"obj_pizzaheadnpc",
		"obj_pizzahead_kickhitbox",
		"obj_bosscontrollerPizzaFaceOLD",
		"obj_iceblockOLD",
		obj_metalblock_escape,
		"obj_peppermanOLDOLD",
		"obj_collisionparent",
		"obj_enemiesbumpable",
		"obj_bigcheeseOLD",
		"obj_pizzafaceOLD",
		"obj_pizzafaceOLDcontroller",
		obj_afom_darkcontroller, // "obj_darkcontroller",
		"obj_waterOLD",
		"obj_doorS",
		obj_afom_secretroomtrigger, //"obj_secretroomtrigger",
		"obj_testobject",
		"obj_AFOMmenu",
		"obj_playersprcontroller",
		"obj_screenwarp",
		"obj_cyopachievements",
		"obj_selectorobj",
		obj_halloweenjumpscare,
		obj_pumpkin,
		obj_pumpkineffect,
		obj_pumpkincounter,
		obj_softlockcrash,
		obj_ratfairy,
		obj_pumpkindoor,
		"obj_varstorage",
		"obj_skateboardOLD",
		"obj_lap2block",
		"obj_reverselap2block",
		"obj_lap3block",
		"obj_reverselap3block",
		"obj_lap4block",
		"obj_reverselap4block",
	];
}

#endregion
#region removed sprites list

global.cyop_base_sprites = ds_map_create();
ds_map_add(global.cyop_base_sprites, "sprite10293", spr_tiledestroy);
ds_map_add(global.cyop_base_sprites, "sprite10332577", spr_meatgrinder);
ds_map_add(global.cyop_base_sprites, "sprite1022", spr_doorB);
ds_map_add(global.cyop_base_sprites, "sprite1023", spr_doorC);
ds_map_add(global.cyop_base_sprites, "sprite1024", spr_doorD);
ds_map_add(global.cyop_base_sprites, "sprite1224", spr_doorE);
ds_map_add(global.cyop_base_sprites, "sprite1025", spr_pepgoblin_kickhitbox);
ds_map_add(global.cyop_base_sprites, "sprite12242610", spr_doorG);
ds_map_add(global.cyop_base_sprites, "sprite12242609", spr_doorF);
ds_map_add(global.cyop_base_sprites, "sprite12242012", spr_doorMonster);
ds_map_add(global.cyop_base_sprites, "sprite12242013", spr_doorRobot);
ds_map_add(global.cyop_base_sprites, "sprite10332571", spr_placeholder64x);
ds_map_add(global.cyop_base_sprites, "sprite1122", spr_blackbars);
ds_map_add(global.cyop_base_sprites, "sprite387", spr_bigdestroy);
ds_map_add(global.cyop_base_sprites, "sprite3871", spr_bigdestroyescape);
ds_map_add(global.cyop_base_sprites, "sprite1029", spr_secretdestroyable);
ds_map_add(global.cyop_base_sprites, "sprite1030", spr_secretbigdestroyable);
ds_map_add(global.cyop_base_sprites, "sprite1034", spr_placeholder);
ds_map_add(global.cyop_base_sprites, "sprite1033", spr_placeholder2);
ds_map_add(global.cyop_base_sprites, "sprite10391", spr_shotgunbulletdown);
ds_map_add(global.cyop_base_sprites, "sprite1790", spr_vigidelete);
ds_map_add(global.cyop_base_sprites, "sprite10332567", spr_fallingplatform);
ds_map_add(global.cyop_base_sprites, "sprite10332478", spr_secrettile);
ds_map_add(global.cyop_base_sprites, "Sprite4219", spr_tutorial_veryimportant); // official change

// TODO Sprite2793 is missing
// TODO sprite10341 is missing
// TODO Sprite27932794 is missing

ds_map_add(global.cyop_base_sprites, "spr_player_mortdash", spr_player_mortattack);
ds_map_add(global.cyop_base_sprites, "spr_ratmountpalette", spr_peppalette);

#endregion

global.in_cyop = false;
global.cyop_rooms = []; // [[runtime_room_index, json]]
global.cyop_audio = -1; // ds_map
global.cyop_sprites = -1; // ds_map
global.cyop_tiles = -1; // ds_map
global.cyop_room_map = -1; // ds_map
global.cyop_asset_cache = -1; // ds_map
global.cyop_fill = 4000;
global.cyop_path = "";
global.cyop_hub_level = "";
global.cyop_level_name = "";
global.cyop_tower_name = "";
global.cyop_is_hub = false;
global.afom_wfixed = false;
global.afom_secrets = 0;

function cyop_cleanup()
{
	global.cyop_is_hub = false;
	global.cyop_level_name = "";
	global.cyop_tower_name = "";
	cyop_freemusic();
	
	// sprites
	var i = ds_map_find_first(global.cyop_sprites);
	while !is_undefined(i)
	{
		if sprite_exists(global.cyop_sprites[?i])
			sprite_delete(global.cyop_sprites[?i]);
		i = ds_map_find_next(global.cyop_sprites, i);
	}
	ds_map_clear(global.cyop_sprites);
	ds_map_clear(global.cyop_tiles);
	
	// audio
	audio_stop_all();
	
	var i = ds_map_find_first(global.cyop_audio);
	while !is_undefined(i)
	{
		if audio_exists(global.cyop_audio[?i])
			audio_destroy_stream(global.cyop_audio[?i]);
		i = ds_map_find_next(global.cyop_audio, i);
	}
	ds_map_clear(global.cyop_audio);
	
	// etc
	with obj_cyop_tilelayer
		instance_destroy();
	ds_map_clear(global.cyop_room_map);
	ds_map_clear(global.cyop_asset_cache);
	ds_list_clear(global.cyop_broken_tiles);
}
function cyop_asset(str)
{
	var find = global.cyop_asset_cache[?str];
	if !is_undefined(find)
		return find;
	else
	{
		var store = asset_get_index(str);
		ds_map_add(global.cyop_asset_cache, str, store);
		return store;
	}
}
function cyop_load(ini)
{
	gamesave_async_save();
	with obj_player
	{
		state = states.door;
		sprite_index = spr_lookdoor;
		image_index = image_number - 1;
	}
	with instance_create(0, 0, obj_loadingscreen)
	{
		cyop_tower = ini;
		cyop_changesave = true;
		scr_pause_activate_objects(false);
	}
}
function cyop_load_internal(ini)
{
	//if live_call(ini) return live_result;
	
	// load ini
	ini_open(ini);
	var type = ini_read_real("properties", "type", 0); // 0 - tower, 1 - level
	global.cyop_tower_name = ini_read_string("properties", "name", "");
	var mainlevel = ini_read_string("properties", "mainlevel", "");
	ini_close();
	
	// target level
	global.cyop_path = filename_dir(ini);
	with obj_cyop_loader
		gamestart = true;
	
	var targetLevel = concat(global.cyop_path, "/levels/", mainlevel, "/level.ini");
	if !file_exists(targetLevel)
		return "This tower has no Main Level.";
	
	var loader = instance_create_unique(0, 0, obj_cyop_assetloader);
	recursive_func = function(folder, prefix)
	{
		if directory_exists(folder)
		{
			// files
			var recursion = [];
			
			var file = file_find_first(concat(folder, "/*"), fa_directory);
			while file != ""
			{
				if directory_exists(concat(folder, "/", file))
					array_push(recursion, file);
				else
				{
					var ext = filename_ext(file);
					
					#region SPRITE
					
					if ext == ".png"
					{
						var filename = filename_change_ext(file, ""); // image
						var filepath = concat(folder, "/", file); // c:/path/image.png
						
						// properties
						ini_open(filename_change_ext(filepath, ".ini"));
						var images = ini_read_real("properties", "images", 0);
						var image_width = ini_read_real("properties", "image_width", 0);
					
						var centered = ini_read_real("offset", "centered", false);
						var x_offset = ini_read_real("offset", "x", 0);
						var y_offset = ini_read_real("offset", "y", 0);
					
						var tileset_size = ini_read_real("tileset", "size", 0);
						ini_close();
						
						// add sprite
						var wd = 0;
						if image_width != 0 or centered
							wd = image_get_size(filepath)[0];
						if image_width != 0
							images = floor(wd / image_width);
						
						// sprite_add_ext is apparently very unstable...
						/*
						var spr = sprite_add_ext(filepath, images == 0 ? 1 : images, x_offset, y_offset, false);
						trace($"--- Loading sprite: {spr}\nFilepath: {filepath}\nImages: {images} Image_width: {image_width}");
						ds_list_add(obj_cyop_assetloader.to_load, spr);
						*/
						
						// Old method
						var spr = sprite_add(filepath, images == 0 ? 1 : images, false, false, 0, 0);
						if sprite_exists(spr)
						{
							sprite_set_speed(spr, 1, spritespeed_framespergameframe);
							
							if centered
							{
								x_offset += sprite_get_width(spr) / 2;
								y_offset += sprite_get_height(spr) / 2;
							}
							sprite_set_offset(spr, x_offset, y_offset);
							
							// add to map(s)
							ds_map_add(global.cyop_sprites, prefix + filename, spr);
							if tileset_size > 0
								ds_map_add(global.cyop_tiles, prefix + filename, [spr, tileset_size]);
						}
						else
							trace("Failed to load sprite ", filepath);
					}
					
					#endregion
					#region AUDIO
					
					if ext == ".ogg"
					{
						var filename = string_replace(file, ext, "");
						var filepath = concat(folder, "/", file);
					
						// properties
						ini_open(concat(folder, "/", filename, ".ini"));
						var loop_start = ini_read_real("loopPoints", "start", 0);
						var loop_end = ini_read_real("loopPoints", "end", 0);
						ini_close();
					
						// add sound
						var snd = audio_create_stream(filepath);
						if loop_start > 0
							audio_sound_loop_start(snd, loop_start);
						if loop_end > 0
							audio_sound_loop_end(snd, loop_end);
						
						ds_map_add(global.cyop_audio, prefix + filename, snd);
					}
					
					#endregion
				}
				file = file_find_next();
			}
			file_find_close();
			
			// look through subfolders
			while array_length(recursion) > 0
			{
				var bwah = array_pop(recursion);
				recursive_func(concat(folder, "/", bwah), concat(bwah, "/"));
			}
		}
	}
	
	// load sprites and audio
	recursive_func(concat(filename_path(ini), "sprites"), "");
	recursive_func(concat(filename_path(ini), "audio"), "");
	
	// if we're somehow done loading
	loader.wait();
	
	// load into the main level
	if type == 0
		global.cyop_hub_level = targetLevel;
	else
		global.cyop_hub_level = "";
	
	return cyop_load_level_internal(targetLevel);
}
function cyop_load_level(ini)
{
	with instance_create(0, 0, obj_loadingscreen)
	{
		cyop_level = ini;
		cyop_changesave = true;
		scr_pause_activate_objects(false);
	}
}
function cyop_load_level_internal(ini, travel = false)
{
	if !file_exists(ini)
		return "INI doesn't exist";
	
	// load ini
	ini_open(ini);
	global.cyop_is_hub = ini_read_real("data", "isWorld", false);
	global.srank = ini_read_real("data", "pscore", 8000);
	global.cyop_level_name = ini_read_string("data", "name", "");
	global.cyop_fill = ini_read_real("data", "escape", 4000);
	var titlecardSprite = ini_read_string("data", "titlecardSprite", "no titlecard");
	var titleSprite = ini_read_string("data", "titleSprite", "");
	var titleSong = ini_read_string("data", "titleSong", "");
	ini_close();
	
	// rooms folder
	var rooms_path = concat(filename_path(ini), "rooms");
	if !directory_exists(rooms_path)
		return "Rooms folder doesn't exist";
	
	try
	{
		ds_map_clear(global.cyop_room_map);
		var version_warned = false;
		
		global.afom_wfixed = false;
		global.afom_secrets = 0;
		var objlist = cyop_objectlist();
		
		// loop through jsons
		var room_file = file_find_first(concat(rooms_path, "/*.json"), fa_none);
		for(var r = 0; room_file != ""; r++)
		{
			var room_name = filename_change_ext(room_file, "");
			trace("Loading room: ", room_file);
			
			// read file
			var reader = buffer_load(concat(rooms_path, "/", room_file));
			var str = buffer_read(reader, buffer_text);
			buffer_delete(reader);
			
			var json = json_parse(str);
			
			// version mismatch
			json = cyop_version_compatibility(json);
			
			if !version_warned && json.editorVersion > 5
				show_message(concat("Expected editorVersion 5, got ", json.editorVersion, "!\nStuff may not work properly."));
			if string_ends_with(room_name, "_wfixed")
				global.afom_wfixed = true;
			
			// load room
			if array_length(global.cyop_rooms) > r
			{
				var _room = global.cyop_rooms[r][0];
				room_assign(_room, custom_room_parent);
				global.cyop_rooms[r] = [_room, json];
			}
			else
			{
				var _room = room_add();
				room_assign(_room, custom_room_parent);
				array_push(global.cyop_rooms, [_room, json]);
			}
			ds_map_add(global.cyop_room_map, room_name, r);
			
			// properties
			var prop = json.properties;
			var wd = prop.levelWidth - prop.roomX, ht = prop.levelHeight - prop.roomY;
			
			room_set_width(_room, prop.levelWidth - prop.roomX);
			room_set_height(_room, prop.levelHeight - prop.roomY);
			room_set_camera(_room, 0, camera_create_view(0, 0, wd, ht));
			
			room_file = file_find_next();
			
			for (var i = 0; i < array_length(json.instances); i++)
	        {
				var this = json.instances[i];
				if this[$ "deleted"]
					continue;
					
				switch objlist[this[$ "object"]]
				{
					// AFOM: count secrets
					case obj_afom_secretroomtrigger:
						global.afom_secrets++;
						break;
					case obj_secretportal:
						var vars = this[$ "variables"];
						if vars[$ "visible"] == 0 or vars[$ "visible"] == false
							break;
						if vars[$ "secret"] != "true"
							break;
						global.afom_secrets++;
						break;
					
					// fucking idiots
					case obj_startgate:
						reset_modifier();
						
						global.cyop_is_hub = true;
						global.cyop_hub_level = ini;
						break;
				}
			}
		}
		file_find_close();
	}
	catch(e)
	{
		trace(e);
		
		// clean
		ds_map_clear(global.cyop_room_map);
		file_find_close();
		
		return "Error loading rooms";
	}
	trace("Done loading rooms");
	
	// load in
	if global.cyop_is_hub
		global.leveltorestart = noone;
	else
		global.leveltorestart = "main";
	global.leveltosave = $"cyop_{string_lower(filename_name(filename_dir(ini)))}";
	
	if !travel
		cyop_enterlevel(false, ini, titlecardSprite, titleSprite, titleSong);
}
function cyop_enterlevel(gate, ini, titlecardSprite, titleSprite, titleSong)
{
	var reset = global.levelreset;
	global.levelreset = false;
	
	scr_playerreset(false, true);
	with obj_player1
	{
		if !reset
		{
			if place_meeting(x, y, obj_startgate)
			{
				sprite_index = isgustavo ? spr_ratmountentergate : spr_entergate;
				image_index = image_number - 1;
			}
				
			state = -1;
			targetDoor = "A";
			
			with obj_camera
				lock = true;
		}
		else
			targetDoor = "HUB";
		targetRoom = "main";
	}
	
	if titlecardSprite != "no titlecard"
	{
		titlecardSprite = (SPRITES[? titlecardSprite] ?? global.cyop_sprites[? titlecardSprite]) ?? spr_null;
		titleSprite = (SPRITES[? titleSprite] ?? global.cyop_sprites[? titleSprite]) ?? spr_null;
		titleSong = cyop_resolvevalue(titleSong, "sound");
	}
				
	if !is_string(titlecardSprite) && titlecardSprite != spr_null && !global.cyop_is_hub
	{
		if !instance_exists(obj_cyop_assetloader) or gate
		{
			with instance_create(0, 0, obj_titlecard)
			{
				titlecard_sprite = titlecardSprite;
				titlecard_index = 0;
				title_index = 0;
				title_sprite = titleSprite;
				title_music = titleSong;
			
				if gate
					cyop_level = ini;
			}
		}
		else
		{
			with obj_cyop_assetloader
			{
				done_func = method({titlecardSprite: titlecardSprite, titleSprite: titleSprite, titleSong: titleSong}, function()
				{
					obj_cyop_assetloader.titlecard = noone;
					obj_cyop_assetloader.done_func = noone;
				
					with instance_create(0, 0, obj_titlecard)
					{
						titlecard_sprite = other.titlecardSprite;
						titlecard_index = 0;
						title_index = 0;
						title_sprite = other.titleSprite;
						title_music = other.titleSong;
					}
				});
				titlecard = titlecardSprite;
				trace($"Titlecard: {titlecard}");
				
				wait();
			}
		}
	}
	else
	{
		if !instance_exists(obj_cyop_assetloader) or gate
		{
			with instance_create(0, 0, obj_fadeout)
			{
				if gate
					cyop_level = ini;
			}
		}
		else
		{
			with obj_cyop_assetloader
			{
				done_func = function() {
					instance_create(0, 0, obj_fadeout);
				}
				wait();
			}
		}
	}
}
function cyop_resolvevalue(value, var_name)
{
	if var_name == "level" or var_name == "levelName" or var_name == "targetRoom"
		return value;
	if var_name == "grav" or var_name == "vsp" // fuck you other tower
		return real(value);
	
	if is_string(value)
	{
		if asset_get_type(value) == asset_object
			return OBJECTS[? value];
		if var_name == "sound" or var_name == "title_music"
			return global.cyop_audio[? value] ?? value;
		
		if !is_undefined(global.cyop_sprites[? value])
			return global.cyop_sprites[? value];
		if !is_undefined(global.cyop_base_sprites[? value])
			return global.cyop_base_sprites[? value];
		
		if asset_get_type(value) == asset_sprite
			return SPRITES[? value];
		
		if string_pos("\"", value) != 0
            return string_replace_all(value, "\"", "");
        switch value
        {
            case "true": return true;
            case "false": return false;
        }
	}
	return value;
}
function cyop_room_goto(str)
{
	if is_string(str)
	{
		if global.afom_wfixed
			var r = global.cyop_room_map[? str + "_wfixed"] ?? global.cyop_room_map[? str];
		else
			var r = global.cyop_room_map[? str];
			
		if is_undefined(r)
		{
			cyop_error_exit($"Custom room {str} doesn't exist.");
			exit;
		}
	}
	else
	{
		// please, avoid this.
		var f = ds_map_find_first(global.cyop_room_map);
		while f != undefined
		{
			var r = global.cyop_room_map[? f];
			if global.cyop_rooms[r][0] == str
				break;
			f = ds_map_find_next(global.cyop_room_map, f);
		}
		if f == undefined
		{
			room_goto(str);
			exit;
		}
		else
			str = f;
		
		trace($"[CYOP] Used actual index instead of room name for \"{str}\"");
	}
	
	room_goto(global.cyop_rooms[r][0]);
	with obj_cyop_loader
	{
		alarm[0] = 1;
		_room = global.cyop_rooms[r][1];
		room_name = str;
		room_ind = r;
	}
}
function cyop_error_exit(msg = "Something happened")
{
	audio_stop_all();
	audio_play_sound(sfx_pephurt, 0, false);
	show_message($"{msg}\n\nTower name: {global.cyop_tower_name}\nTower ID: {filename_name(global.cyop_path)}");
	
	with obj_pause
	{
		hub = false;
		event_perform(ev_alarm, 3);
	}
	return false;
}
function cyop_version_compatibility(d)
{
    var editorVer = d[$ "editorVersion"] ?? 0;
	
	// VERSION ? - { "1": {}, "2": {} } used to be normal array
	if is_array(d.backgrounds)
        d.backgrounds = {};
	
	// VERSION 0 - missing bg hspeed and vspeed
	if editorVer <= 0
	{
		var bgs = variable_struct_get_names(d.backgrounds);
        for (var i = 0; i < array_length(bgs); i++)
        {
			d.backgrounds[$ bgs[i]].hspeed ??= 0;
			d.backgrounds[$ bgs[i]].vspeed ??= 0;
        }
	}
	
	// VERSION 1 - missing song
	if editorVer <= 1
		d.properties.song = "";
	
	// VERSION 2 - missing songTransitionTime
	if editorVer <= 2
		d.properties.songTransitionTime = 100;
	
	// VERSION 3 - bgs missing image_speed and panic_sprite
	if editorVer <= 3
	{
		var bgs = variable_struct_get_names(d.backgrounds);
	    for (var i = 0; i < array_length(bgs); i++)
	    {
			d.backgrounds[$ bgs[i]].image_speed ??= 15;
			d.backgrounds[$ bgs[i]].panic_sprite ??= -1;
	    }
	}
	
	// VERSION 4 - remove offgrid tiles (still happens in 5.0 lol)
	if editorVer <= 4
	{
		var ls = variable_struct_get_names(d.tile_data);
	    for (var l = 0; l < array_length(ls); l++)
	    {
	        var lay = struct_get(d.tile_data, ls[l]);
	        var tiles = variable_struct_get_names(lay);
			
	        for (var i = 0; i < array_length(tiles); i++)
	        {
	            var pos = string_split(tiles[i], "_", true, 1);
	            if abs(real(pos[0])) % 32 != 0 or abs(real(pos[1])) % 32 != 0
	                variable_struct_remove(lay, tiles[i]);
	        }
	    }
	}
	
    return d;
}